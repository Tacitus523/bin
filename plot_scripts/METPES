#!/home/lpetersen/miniconda3/envs/mda/bin/python
"""
  Script creates metad pes from hills
"""
import argparse
import os
import sys
from typing import Optional, Tuple, List

import matplotlib.pyplot as plt
import numpy as np


PERIODIC_LIMITS = ((-180, 120), (-100, 240))  # for periodic CVs, in degrees
NON_PERIODIC_LIMITS = ((1.8, 11), (1.8, 11))  # for non-periodic CVs, in Angstrom
FIGSIZE = (7, 6)
DPI = 100

KJ_TO_KCAL = 1/4.184

def parse_args() -> argparse.Namespace:
	parser = argparse.ArgumentParser(
		description="Create metad PES from hills file"
	)
	parser.add_argument(
		"e_max", 
		type=float, 
		help="Maximum energy for contour lines (in kcal/mol)"
	)
	parser.add_argument(
		"-f", "--fes_file", 
		type=str, 
		default="fes.dat", 
		help="Path to the fes.dat file (default: fes.dat)"
	)
	parser.add_argument(
		"-d", "--directory",
		type=str,
		default=None,
		help="Directory to scan for files with prefixed 'fes_'"
	)
	args = parser.parse_args()
	if args.directory is not None:
		assert os.path.isdir(args.directory), f"Error: {args.directory} is not a valid directory."
	else:
		assert os.path.isfile(args.fes_file), f"Error: {args.fes_file} not found."
	return args

def analyze_fes_file(file_path: str) -> Tuple[List[int], List[bool]]:
	"""
	Extracts the nbins numbers from a plumed generated fes.dat file
	"""
	nbins_list = []
	periodicity_list = []
	with open(file_path, 'r') as file:
		for line in file.readlines():
			if not line.startswith('#!'):
				break
			if 'nbins' in line:
				nbins = int(line.split()[-1])
				nbins_list.append(nbins)
			if 'periodic' in line:
				if 'true' in line:
					periodicity_list.append(True)
				elif 'false' in line:
					periodicity_list.append(False)
				else:
					raise ValueError(f'Could not parse periodicity from line: {line}')
	assert len(nbins_list) > 0, f'No nbins found in file {file_path}'
	assert len(periodicity_list) > 0, f'No periodicity found in file {file_path}'
	assert len(nbins_list) == len(periodicity_list), f'Number of nbins and periodicity do not match'
	if len(nbins_list) > 2:
		raise ValueError(f'Found more than 2 nbins in file {file_path}')
	return nbins_list, periodicity_list

def load_fes_data(fes_file_path) -> Tuple[np.ndarray, np.ndarray, np.ndarray, List[bool]]:
	nbins_list, periodicity_list = analyze_fes_file(fes_file_path)
	x, y, energies = np.loadtxt(fes_file_path, usecols=(0,1,2), skiprows=0, unpack=True) # in rad

	xx = np.reshape(x, nbins_list)
	yy = np.reshape(y, nbins_list)

	if periodicity_list[0] is True:
		xx = (xx*360/(2*np.pi)) # in deg
		xx = np.concatenate([xx-360, xx, xx+360], axis=1)
		xx = np.concatenate([xx, xx, xx], axis=0)
	else:
		xx = (xx*10) # in Angstrom

	if periodicity_list[1] is True:
		yy = (yy*360/(2*np.pi)) # in deg
		yy = np.concatenate([yy-360, yy, yy+360], axis=0)
		yy = np.concatenate([yy, yy, yy], axis=1)
	else:
		yy = (yy*10) # in Angstrom

	# kcal/mol
	zz = np.reshape(energies*KJ_TO_KCAL, nbins_list)
	for CV_idx, periodicity_bool in enumerate(periodicity_list):
		if periodicity_bool is True:
			zz = np.concatenate([zz, zz, zz], axis=CV_idx)
	return xx, yy, zz, periodicity_list

def plot_multiple_fes(args: argparse.Namespace) -> None:
	fes_files = [os.path.join(args.directory, f) for f in os.listdir(args.directory) if f.startswith("fes_") and f.endswith(".dat")]
	fes_files.sort()
	num_files = len(fes_files)
	if num_files == 0:
		print(f"No fes_*.dat files found in directory {args.directory}. Exiting.")
		sys.exit(1)

	# Determine grid size for subplots
	ncols = 3
	nrows = (num_files + ncols - 1) // ncols  # Ceiling division

	fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(ncols*FIGSIZE[0], nrows*FIGSIZE[1]))
	axes = axes.flatten()  # Flatten to easily iterate over

	for ax, fes_file in zip(axes, fes_files):
		args.fes_file = fes_file
		plot_single_fes(args, ax=ax)

	# Remove any unused subplots
	for i in range(num_files, len(axes)):
		fig.delaxes(axes[i])

	plt.tight_layout()
	output_file = os.path.join(args.directory, "PMFs.png")
	plt.savefig(output_file, dpi=DPI)
	print(f"PES figure saved to {output_file}")

def plot_single_fes(
		args: argparse.Namespace,
		ax=None
	) -> None:
	xx, yy, zz, periodicity_list = load_fes_data(args.fes_file)

	standalone = False
	if ax is None:
		fig, ax = plt.subplots(figsize=FIGSIZE)
		standalone = True

	label_fs = 18
	ticks_fs = 16
	labelpad = -.8

	if periodicity_list[0] is True:
		ax.set_xlim(PERIODIC_LIMITS[0][0], PERIODIC_LIMITS[0][1])
		ax.set_xlabel(r"$\varphi$ [°]", 
						fontsize=label_fs, labelpad=labelpad)
	else:
		ax.set_xlim(NON_PERIODIC_LIMITS[0][0], NON_PERIODIC_LIMITS[0][1])
		ax.set_xlabel(r"S$^\mathrm{1}$-S$^\mathrm{2}$" + u" [\u212B]", 
						fontsize=label_fs, labelpad=labelpad)

	if periodicity_list[1] is True:
		ax.set_ylim(PERIODIC_LIMITS[1][0], PERIODIC_LIMITS[1][1])
		ax.set_ylabel(r"$\psi$ [°]", 
					fontsize=label_fs, labelpad=labelpad)
	else:
		ax.set_ylim(NON_PERIODIC_LIMITS[1][0], NON_PERIODIC_LIMITS[1][1])
		ax.set_ylabel(r"S$^\mathrm{2}$-S$^\mathrm{3}$" + u" [\u212B]", 
						fontsize=label_fs, labelpad=labelpad)

	ax.tick_params(axis='x', labelsize=ticks_fs)
	ax.tick_params(axis='y', labelsize=ticks_fs)
	ax.set_aspect('equal')

	e_max = args.e_max
	lines=np.arange(0, e_max+.1, 1.0)
	linesf=np.arange(0, e_max+.1, 0.1)
	cbticks=np.arange(0, e_max+.1, 5)

	fig1 = ax.contourf(xx, yy, zz, cmap="viridis", levels=linesf)
	fig2 = ax.contour(xx, yy, zz, levels=lines, colors="black", linewidths=0.3)

	# Modified colorbar to match actual plot height
	cb = plt.colorbar(fig1, ticks=cbticks, ax=ax, pad=0.02, 
					fraction=0.053, aspect=20)  # Adjust aspect to control height
	cb.set_label(r"$\Delta$G [kcal/mol]", fontsize=label_fs, labelpad=5, rotation=90)
	cb.ax.tick_params(labelsize=ticks_fs)


	if standalone is True:
		fig.tight_layout()
		plt.savefig("PMFs.png", dpi=DPI)
		print("PES figure saved to PMFs.png")
	else:
		title = os.path.basename(args.fes_file).replace("fes_", "").replace(".dat", "")
		ax.set_title(title, fontsize=14)  # Set title for the subplot


def main() -> None:
	args = parse_args()
	if args.directory is not None:
		plot_multiple_fes(args)
	else:
		plot_single_fes(args)

if __name__ == "__main__":
	main()